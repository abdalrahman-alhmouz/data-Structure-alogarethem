/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.Test;
import static org.junit.Assert.*;

public class AppTest {
    Graph graph = new Graph();
        Node node=new Node(1);
        Node node2=new Node(2);
        Node node3=new Node(3);
        Node node4=new Node(4);
        Node node5=new Node(5);

    @Test public void testOne() {
        graph.addNode(node);
        graph.addNode(node2);

        assertNotNull(graph);
        assertEquals("The graph has 2 Node",graph.getNodeCount());
    }
    @Test public void testTow() {
         graph.addNode(node);
        graph.addNode(node2);

        graph.addEdge(node,node2,1);
        graph.addEdge(node,node3,1);
        graph.addEdge(node2,node4,1);

        assertTrue(graph.hasEdge(node,node2,1));
        assertFalse(graph.hasEdge(node2,node3,1));
    }
    @Test public void testThree() {
        graph.addNode(node);
        graph.addNode(node2);
        graph.addNode(node3);
        graph.addNode(node4);

        assertEquals("The graph has 4 Node",graph.getNodeCount());
        assertEquals("the node in the graph 1 2 3 4 ",graph.getNodes());
    }
    @Test public void testFour() {
        graph.addNode(node);
        graph.addNode(node2);
        graph.addNode(node3);
        graph.addNode(node4);

        graph.addEdge(node,node2,1);
        graph.addEdge(node,node3,1);
        graph.addEdge(node2,node4,1);
        graph.addEdge(node5,node4,1);

        assertEquals("the connected Node from left is 1 and the weight of the connection is 1",graph.getNeighbors(node3));
        assertEquals("the connected Node from right is 4and the weight of the connection is1",graph.getNeighbors(node5));
    }
    @Test public void five() {
        graph.addNode(node);
        graph.addNode(node2);
        graph.addNode(node3);
        graph.addNode(node4);

        graph.addEdge(node,node2,1);
        graph.addEdge(node,node3,1);
        graph.addEdge(node2,node4,1);
        graph.addEdge(node5,node4,1);

        assertEquals("the connected Node from left is 1 and the weight of the connection is 1the connected Node from right is 4and the weight of the connection is1",graph.getNeighbors(node2));
        assertEquals("the connected Node from right is 2and the weight of the connection is1the connected Node from right is 3and the weight of the connection is1",graph.getNeighbors(node));
    }
    @Test public void testSix() {
        graph.addNode(node);
        graph.addNode(node2);
        graph.addNode(node3);
        graph.addNode(node4);

        assertEquals("The graph has 4 Node",graph.getNodeCount());
    }
    @Test public void testSeven() {
        graph.addNode(node);
        Node node2=new Node(2);

        graph.addEdge(node,node2,1);

        assertNotNull(graph.isEmpty());
        assertTrue(graph.hasEdge(node,node2,1));
    }
    @Test public void test8() {
       Graph emptyGraph=new Graph();

        assertNull(emptyGraph.isEmpty());
    }
}
