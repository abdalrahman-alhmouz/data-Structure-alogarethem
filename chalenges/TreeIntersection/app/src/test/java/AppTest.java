/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TreeIntersection;

import org.junit.Test;

import java.util.Arrays;

import static org.junit.Assert.*;

public class AppTest {
    @Test public void testAppHasAGreeting() {

        TreeIntersection treeOne=new TreeIntersection();
        TreeIntersection.Node root1 = null;
        root1 = treeOne.insert(root1, 5);
        root1 = treeOne.insert(root1, 1);
        root1 = treeOne.insert(root1, 10);
        root1 = treeOne.insert(root1, 0);
        root1 = treeOne.insert(root1, 4);
        root1 = treeOne.insert(root1, 7);
        root1 = treeOne.insert(root1, 9);

        // Create second tree as shown in example
        TreeIntersection.Node root2 = null;
        root2 = treeOne.insert(root2, 10);
        root2 = treeOne.insert(root2, 7);
        root2 = treeOne.insert(root2, 20);
        root2 = treeOne.insert(root2, 4);
        root2 = treeOne.insert(root2, 9);

        treeOne.inorder(root1);
        treeOne.inorder(root2);

        assertEquals(Arrays.asList(4 , 7, 9, 10),treeOne.printCommon(root1, root2));
    }

    @Test public void testTow() {

        TreeIntersection treeOne=new TreeIntersection();
        TreeIntersection.Node root1 = null;
        root1 = treeOne.insert(root1, 5);
        root1 = treeOne.insert(root1, 1);
        root1 = treeOne.insert(root1, 10);
        root1 = treeOne.insert(root1, 0);
        root1 = treeOne.insert(root1, 4);
        root1 = treeOne.insert(root1, 7);
        root1 = treeOne.insert(root1, 9);

        TreeIntersection.Node root2 = null;
        root2 = treeOne.insert(root2, 10);


        treeOne.inorder(root1);
        treeOne.inorder(root2);

        assertEquals(Arrays.asList(10),treeOne.printCommon(root1, root2));
    }

    @Test public void testThree() {

        TreeIntersection treeOne=new TreeIntersection();
        TreeIntersection.Node root1 = null;
        root1 = treeOne.insert(root1, 5);
        root1 = treeOne.insert(root1, 1);
        root1 = treeOne.insert(root1, 10);
        root1 = treeOne.insert(root1, 0);
        root1 = treeOne.insert(root1, 4);
        root1 = treeOne.insert(root1, 7);
        root1 = treeOne.insert(root1, 9);

        TreeIntersection.Node root2 = null;
        root2 = treeOne.insert(root2, 50);
        root2 = treeOne.insert(root2, 60);
        root2 = treeOne.insert(root2, 70);
        root2 = treeOne.insert(root2, 80);


        treeOne.inorder(root1);
        treeOne.inorder(root2);

        assertEquals(Arrays.asList(),treeOne.printCommon(root1, root2));
    }
}
