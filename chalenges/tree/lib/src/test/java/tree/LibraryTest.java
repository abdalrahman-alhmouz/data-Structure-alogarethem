/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tree;

import org.junit.Test;
import static org.junit.Assert.*;

public class LibraryTest {

    @Test public void addTest() {
        Node root=new Node(7,null,null);

        BinarySearchTree tree = new BinarySearchTree(root);
        tree.root = new Node(7);

        Node node=new Node(1,null,null);
        tree.addTow(node,tree.root);
        Node nodeTow=new Node(9,null,null);
        tree.addTow(nodeTow,tree.root);
        assertEquals(9, tree.root.rigth.value);
        assertEquals(1, tree.root.left.value);
    }
    @Test public void preOrderTest() {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.rigth = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.rigth = new Node(5);
//        System.out.println(tree.printPreorder());
        assertEquals("null1 2 4 5 3 ", tree.printPreorder());
    }
    @Test public void inorderTest() {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.rigth = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.rigth = new Node(5);
        assertEquals("null4 2 5 1 3 ", tree.printInorder());
    }
    @Test public void postorderTest() {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.rigth = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.rigth = new Node(5);
        assertEquals("null4 5 2 3 1 ", tree.printPostorder());
    }

    @Test public void instantiateTest() {
        Node root=new Node();

        BinarySearchTree tree = new BinarySearchTree(root);
        tree.root = new Node();
        System.out.println(tree);
        assertTrue(tree.root.value==0);
    }
    @Test public void instantiateOneNode() {
        Node root=new Node(7,null,null);

        BinarySearchTree tree = new BinarySearchTree(root);
        tree.root = new Node(7);

        assertEquals(7, tree.root.value);
    }


//    __________________________________________{{{{code Chaleng 17}}}}
@Test public void traversTest() {
    Node root=new Node();

    BinarySearchTree tree = new BinarySearchTree(root);
    BinaryTree tree1=new BinaryTree();
    tree.addThre(9,root);
    tree.addThre(10,root);
    tree.addThre(5,root);
    tree.addThre(8,root);
    tree.addThre(6,root);
    tree.addThre(4,root);

    assertEquals("[9, 5, 10, 4, 8, 6]", tree1.traversal(tree.root.rigth).toString());


}
    @Test public void traversTestTow() {
        Node root=new Node();

        BinarySearchTree tree = new BinarySearchTree(root);
        BinaryTree tree1=new BinaryTree();
        tree.addThre(9,root);
        tree.addThre(10,root);
        tree.addThre(8,root);
        assertEquals("[9, 8, 10]", tree1.traversal(tree.root.rigth).toString());
    }

    @Test public void testo() {
        Node root=new Node();

        BinarySearchTree tree = new BinarySearchTree(root);
        BinaryTree tree1=new BinaryTree();
        tree.addThre(9,root);

        assertEquals("[9]", tree1.traversal(tree.root.rigth).toString());
    }

    @Test public void traversTestEmbty() {
        Node root=new Node();

        BinarySearchTree tree = new BinarySearchTree(root);
        BinaryTree tree1=new BinaryTree();

        assertEquals("[0]", tree1.traversal(tree.root).toString());
    }

//    __________________________________________{{{{code Chaleng 17}}}}

}
